; OM File Header - Saved 2019/09/23 23:16:33
; (6.15 :patc (om-make-point 109 38) (om-make-point 386 64) (om-make-point 1079 688) "" 183 0 nil "2019/09/23 23:16:33")
; End File Header
; External resources 
; (list (list (quote :sound) "#P\"../../in-files/africa.aiff\"") (list (quote :sdif) "#P\"../../out-files/f0.sdif\"" "#P\"../../out-files/chordseqs.sdif\"" "#P\"../../out-files/partials.sdif\""))
(in-package :om)(load-lib-for (quote ("om-pm2")))(setf *om-current-persistent* (om-load-patch1 "01-pm2-analyses" (quote ((let ((box (om-load-boxcall (quote genfun) "SDIF->CHORD-SEQ" (quote sdif->chord-seq) (quote ((om-load-inputfun (quote input-funbox) "SDIF file" "SELF" nil))) (om-make-point 177 346) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SDIF->CHORD-SEQ" (quote sdif->chord-seq) (quote ((om-load-inputfun (quote input-funbox) "SDIF file" "SELF" nil))) (om-make-point 435 368) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 188 79) (quote "The segments can be in the sound or passed directly to CHORD-SEQ-ANALYSIS in the :markers input") "" (om-make-point 544 235) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 600 48) (quote "All sound analysis results are saved as SDIF files.$OM prvide tools for reading and manipulating SDIF data (see Functions/Audio/SDIF/ menu)") "" (om-make-point 303 3) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 169 75) (quote "FUNDAMENTAL FREQUENCY ESTIMATION") "" (om-make-point 894 165) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 169 75) (quote "CHORD-SEQ ANALYSIS$(uses preliminary sound segmetation to discriminate 'chords')") "" (om-make-point 544 161) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 100 40) (quote "PARTIAL TRACKING") "" (om-make-point 208 167) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 199 44) (quote "pm2 analysis tools") "" (om-make-point 86 4) nil (om-make-color 0 0 0) (om-make-font "Verdana" 18.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 284 61) (quote "See the functions documetation [d] for a detailed description of the analysis tools arguments (keywords, [k/K])") "" (om-make-point 397 590) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GETSDIFCHORDS" (quote getsdifchords) (quote ((om-load-inputfun (quote input-funbox) "an SDIF file" "SELF" nil))) (om-make-point 26 347) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "LEGATO" 0))) (om-make-point 39 445) (om-make-point 245 94) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5972) (6552) (6796) (7184) (8444) (9332) (9584) (6664) (6782) (7528) (6324) (7972) (7192) (6906) (5172) (9086) (9976) (8772) (6508) (6558) (9334) (8448) (6786) (7752) (7188) (6330) (6812) (7532) (9082) (5192) (6520) (6556) (6148) (7032) (9332) (7186) (8444) (6868) (9084) (9578) (6320) (6782) (7532) (7044) (7978) (6522) (5136) (6558) (5994) (6186) (9334) (7376) (7480) (8446) (7098) (8078) (6792) (10146) (6660) (7754) (8566) (5992) (6324) (7188) (7530) (5968) (6792) (6522) (5192) (6554) (5982) (6248) (7188) (9334) (8446) (6800) (6324) (6784) (7534) (7978) (6558) (6194) (9334) (7480) (7376) (8446) (7100) (8078) (10146) (7754) (6660) (8566) (5992) (6324) (5968) (7188) (7530) (6792) (6522) (5192) (6552) (5982) (6248) (7188) (9334) (8446) (6800) (6322) (6786) (7532) (7976) (7474) (7380) (6118) (7340) (7270) (7376) (6164) (9980) (5090) (8568) (9556) (10176) (6532) (6552) (6330) (7382) (9330) (8442) (6790) (9782) (9978) (9544) (8560) (10166) (6662) (7192) (5978) (6918) (6336) (7530) (6804) (9094) (6644) (9582) (5204) (6536) (6094) (7188) (6258) (9332) (8446) (6758) (9086) (9582) (7530) (6322) (6782) (7980) (7056) (9558) (6536) (5162) (6556) (6266) (7364) (9332) (9984) (9790) (6796) (8446) (10174) (5976) (7192) (6818) (7530) (9582) (5118) (6558) (9332) (8444) (6794) (9084) (9584) (6324) (6784) (7528) (7976) (6542) (5970) (7190) (5112) (7046) (9578) (6548) (9336) (8450) (6778) (7760) (5974) (7188) (6772) (6632) (7534) (6326) (9582) (5168) (6542) (7190) (9330) (8444) (9086) (9584) (6774) (6322) (7530) (9564) (7970) (5134) (6560) (6154) (7392) (9338) (6794) (8576) (8452) (9792) (9988))) :lonset (quote (46 46 46 46 46 46 64 110 116 133 133 163 255 267 284 284 290 290 313 401 424 430 441 453 522 534 534 540 557 679 691 778 801 807 807 813 818 830 842 877 935 940 940 964 969 1039 1062 1207 1225 1225 1225 1231 1231 1231 1231 1242 1242 1248 1260 1260 1271 1277 1347 1353 1353 1353 1364 1503 1527 1602 1614 1620 1625 1631 1637 1643 1753 1753 1765 1776 1875 1881 1892 1898 1898 1898 1898 1910 1916 1927 1927 1939 1945 2014 2020 2020 2020 2032 2171 2194 2270 2281 2287 2293 2299 2305 2310 2421 2421 2432 2450 2485 2485 2496 2514 2514 2548 2560 2566 2572 2577 2583 2583 2601 2670 2693 2699 2699 2705 2705 2717 2723 2723 2728 2740 2763 2804 2810 2815 2815 2827 2844 2844 2850 2856 2961 3065 3071 3088 3094 3094 3100 3111 3129 3158 3222 3222 3222 3245 3257 3268 3315 3344 3495 3500 3500 3518 3518 3524 3529 3529 3529 3611 3616 3622 3628 3680 3756 3878 3907 3913 3913 3918 3936 4023 4029 4034 4052 4087 4162 4162 4180 4191 4232 4284 4307 4319 4319 4342 4423 4423 4423 4447 4452 4452 4499 4551 4690 4696 4714 4731 4731 4754 4824 4830 4836 4836 4847 4992 5091 5114 5120 5120 5132 5137 5137 5143 5149 5184)) :ldur (quote ((993) (122) (41) (197) (35) (58) (104) (12) (215) (215) (215) (122) (244) (12) (93) (75) (29) (35) (29) (168) (87) (52) (35) (58) (261) (238) (58) (226) (35) (46) (17) (192) (23) (17) (70) (209) (29) (23) (41) (58) (232) (197) (221) (35) (81) (29) (87) (186) (23) (145) (81) (134) (17) (52) (23) (52) (29) (12) (12) (46) (12) (12) (226) (250) (215) (273) (41) (41) (17) (192) (302) (17) (250) (58) (35) (23) (122) (180) (116) (75) (186) (157) (81) (17) (134) (52) (23) (52) (12) (46) (12) (12) (12) (226) (273) (250) (215) (41) (41) (17) (250) (279) (17) (267) (58) (35) (23) (186) (209) (209) (104) (12) (12) (12) (12) (17) (110) (308) (46) (41) (52) (23) (23) (29) (174) (12) (163) (70) (46) (41) (58) (23) (41) (29) (23) (12) (255) (505) (12) (209) (203) (35) (17) (17) (116) (35) (203) (12) (209) (12) (87) (35) (17) (29) (64) (215) (221) (203) (110) (17) (35) (81) (46) (174) (342) (157) (58) (41) (29) (29) (29) (17) (534) (511) (64) (215) (70) (29) (180) (64) (35) (35) (23) (58) (226) (192) (215) (104) (99) (267) (238) (35) (12) (35) (163) (64) (29) (29) (12) (511) (250) (52) (23) (209) (209) (58) (35) (186) (221) (58) (17) (29) (64) (203) (226) (215) (70) (99) (58) (93) (70) (64) (58) (29) (41) (17) (29) (23))) :lvel (quote ((90) (120) (20) (95) (12) (19) (13) (17) (123) (40) (48) (21) (89) (13) (18) (14) (12) (12) (14) (153) (18) (14) (34) (12) (84) (60) (26) (59) (11) (12) (10) (138) (18) (14) (17) (97) (11) (21) (12) (12) (47) (136) (45) (13) (20) (12) (19) (143) (19) (58) (20) (31) (14) (14) (11) (14) (36) (11) (31) (12) (10) (16) (48) (85) (39) (91) (19) (12) (11) (137) (83) (15) (84) (16) (12) (29) (40) (100) (32) (21) (143) (55) (20) (14) (31) (14) (11) (14) (11) (12) (31) (10) (16) (48) (91) (85) (39) (19) (12) (11) (120) (94) (15) (90) (16) (12) (29) (44) (91) (34) (13) (16) (13) (29) (12) (21) (29) (60) (15) (14) (13) (11) (11) (11) (155) (31) (29) (17) (13) (34) (16) (11) (13) (11) (12) (13) (102) (100) (14) (45) (36) (24) (10) (24) (14) (12) (131) (12) (110) (15) (17) (12) (25) (11) (11) (37) (39) (149) (23) (12) (12) (21) (15) (122) (53) (26) (17) (13) (12) (27) (11) (11) (93) (90) (23) (40) (12) (12) (139) (15) (11) (33) (11) (12) (38) (143) (32) (22) (12) (84) (92) (12) (14) (11) (140) (18) (11) (35) (10) (95) (82) (23) (21) (52) (63) (11) (11) (129) (104) (14) (10) (11) (13) (133) (35) (34) (11) (20) (16) (155) (57) (34) (17) (35) (13) (11) (13) (11))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote t) nil 0)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "LEGATO" 0))) (om-make-point 403 449) (om-make-point 245 94) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5972 6328 6544 6770 7188 7530 7972) (5972 6544 6794 7186) (5972 6322 6542 6788 7188 7534) (5158 6324 6778 7530) (5964 6174 6544 6782 7186 7382 7526) (5978 6316 6542 7188 7530) (5968 6326 6544 6786 7186 7530) (5972 6160 6542 6788 7188 7384 7534) (5978 6318 6544 7190 7528) (5966 6324 6536 6784 7188 7534) (5974 6324 6546 6782 7188 7530) (5976 6322 6538 7188 7532) (5970 6324 6544 6776 7190 7532))) :lonset (quote (113 311 565 1018 1173 1442 1739 2304 2869 3195 3802 4339 4707 5230)) :ldur (quote ((198 198 198 198 198 198 198) (254 254 254 254) (453 453 453 453 453 453) (155 155 155 155) (269 269 269 269 269 269 269) (297 297 297 297 297) (565 565 565 565 565 565) (565 565 565 565 565 565 565) (326 326 326 326 326) (607 607 607 607 607 607) (537 537 537 537 537 537) (368 368 368 368 368) (523 523 523 523 523 523))) :lvel (quote ((97 74 56 127 93 67 51) (91 110 53 93) (106 68 82 66 100 66) (50 71 108 70) (70 66 106 51 66 52 53) (104 54 91 94 54) (88 62 84 67 78 57) (80 66 107 71 78 52 52) (110 58 85 109 56) (77 63 75 80 74 59) (99 55 83 83 97 52) (95 66 74 85 62) (75 56 95 85 73 53))) :loffset (quote ((0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0))) :lchan (quote ((1 1 1 1 1 1 1) (1 1 1 1) (1 1 1 1 1 1) (1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote t) nil 0)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "X-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "Y-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer)" "DECIMALS" 0))) (om-make-point 794 412) (om-make-point 215 121) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.023 0.029 0.035 0.041 0.046 0.052 0.058 0.064 0.07 0.075 0.081 0.087 0.093 0.099 0.104 0.11 0.116 0.122 0.128 0.134 0.139 0.145 0.151 0.157 0.163 0.168 0.174 0.18 0.186 0.192 0.197 0.203 0.209 0.215 0.221 0.226 0.232 0.238 0.244 0.25 0.255 0.261 0.267 0.273 0.279 0.284 0.29 0.296 0.302 0.308 0.313 0.319 0.325 0.331 0.337 0.342 0.348 0.354 0.36 0.366 0.372 0.377 0.383 0.389 0.395 0.401 0.406 0.412 0.418 0.424 0.43 0.435 0.441 0.447 0.453 0.459 0.464 0.47 0.476 0.482 0.488 0.493 0.499 0.505 0.511 0.517 0.522 0.528 0.534 0.54 0.546 0.551 0.557 0.563 0.569 0.575 0.58 0.586 0.592 0.598 0.604 0.61 0.615 0.621 0.627 0.633 0.639 0.644 0.65 0.656 0.662 0.668 0.673 0.679 0.685 0.691 0.697 0.702 0.708 0.714 0.72 0.726 0.731 0.737 0.743 0.749 0.755 0.76 0.766 0.772 0.778 0.784 0.789 0.795 0.801 0.807 0.813 0.818 0.824 0.83 0.836 0.842 0.848 0.853 0.859 0.865 0.871 0.877 0.882 0.888 0.894 0.9 0.906 0.911 0.917 0.923 0.929 0.935 0.94 0.946 0.952 0.958 0.964 0.969 0.975 0.981 0.987 0.993 0.998 1.004 1.01 1.016 1.022 1.027 1.033 1.039 1.045 1.051 1.056 1.062 1.068 1.074 1.08 1.086 1.091 1.097 1.103 1.109 1.115 1.12 1.126 1.132 1.138 1.144 1.149 1.155 1.161 1.167 1.173 1.178 1.184 1.19 1.196 1.202 1.207 1.213 1.219 1.225 1.231 1.236 1.242 1.248 1.254 1.26 1.265 1.271 1.277 1.283 1.289 1.295 1.3 1.306 1.312 1.318 1.324 1.329 1.335 1.341 1.347 1.353 1.358 1.364 1.37 1.376 1.382 1.387 1.393 1.399 1.405 1.411 1.416 1.422 1.428 1.434 1.44 1.445 1.451 1.457 1.463 1.469 1.474 1.48 1.486 1.492 1.498 1.503 1.509 1.515 1.521 1.527 1.533 1.538 1.544 1.55 1.556 1.562 1.567 1.573 1.579 1.585 1.591 1.596 1.602 1.608 1.614 1.62 1.625 1.631 1.637 1.643 1.649 1.654 1.66 1.666 1.672 1.678 1.683 1.689 1.695 1.701 1.707 1.712 1.718 1.724 1.73 1.736 1.741 1.747 1.753 1.759 1.765 1.771 1.776 1.782 1.788 1.794 1.8 1.805 1.811 1.817 1.823 1.829 1.834 1.84 1.846 1.852 1.858 1.863 1.869 1.875 1.881 1.887 1.892 1.898 1.904 1.91 1.916 1.921 1.927 1.933 1.939 1.945 1.95 1.956 1.962 1.968 1.974 1.979 1.985 1.991 1.997 2.003 2.009 2.014 2.02 2.026 2.032 2.038 2.043 2.049 2.055 2.061 2.067 2.072 2.078 2.084 2.09 2.096 2.101 2.107 2.113 2.119 2.125 2.13 2.136 2.142 2.148 2.154 2.159 2.165 2.171 2.177 2.183 2.188 2.194 2.2 2.206 2.212 2.217 2.223 2.229 2.235 2.241 2.247 2.252 2.258 2.264 2.27 2.276 2.281 2.287 2.293 2.299 2.305 2.31 2.316 2.322 2.328 2.334 2.339 2.345 2.351 2.357 2.363 2.368 2.374 2.38 2.386 2.392 2.397 2.403 2.409 2.415 2.421 2.426 2.432 2.438 2.444 2.45 2.455 2.461 2.467 2.473 2.479 2.485 2.49 2.496 2.502 2.508 2.514 2.519 2.525 2.531 2.537 2.543 2.548 2.554 2.56 2.566 2.572 2.577 2.583 2.589 2.595 2.601 2.606 2.612 2.618 2.624 2.63 2.635 2.641 2.647 2.653 2.659 2.664 2.67 2.676 2.682 2.688 2.694 2.699 2.705 2.711 2.717 2.723 2.728 2.734 2.74 2.746 2.752 2.757 2.763 2.769 2.775 2.781 2.786 2.792 2.798 2.804 2.81 2.815 2.821 2.827 2.833 2.839 2.844 2.85 2.856 2.862 2.868 2.873 2.879 2.885 2.891 2.897 2.902 2.908 2.914 2.92 2.926 2.932 2.937 2.943 2.949 2.955 2.961 2.966 2.972 2.978 2.984 2.99 2.995 3.001 3.007 3.013 3.019 3.024 3.03 3.036 3.042 3.048 3.053 3.059 3.065 3.071 3.077 3.082 3.088 3.094 3.1 3.106 3.111 3.117 3.123 3.129 3.135 3.14 3.146 3.152 3.158 3.164 3.17 3.175 3.181 3.187 3.193 3.199 3.204 3.21 3.216 3.222 3.228 3.233 3.239 3.245 3.251 3.257 3.262 3.268 3.274 3.28 3.286 3.291 3.297 3.303 3.309 3.315 3.32 3.326 3.332 3.338 3.344 3.349 3.355 3.361 3.367 3.373 3.378 3.384 3.39 3.396 3.402 3.408 3.413 3.419 3.425 3.431 3.437 3.442 3.448 3.454 3.46 3.466 3.471 3.477 3.483 3.489 3.495 3.5 3.506 3.512 3.518 3.524 3.529 3.535 3.541 3.547 3.553 3.558 3.564 3.57 3.576 3.582 3.587 3.593 3.599 3.605 3.611 3.616 3.622 3.628 3.634 3.64 3.646 3.651 3.657 3.663 3.669 3.675 3.68 3.686 3.692 3.698 3.704 3.709 3.715 3.721 3.727 3.733 3.738 3.744 3.75 3.756 3.762 3.767 3.773 3.779 3.785 3.791 3.796 3.802 3.808 3.814 3.82 3.825 3.831 3.837 3.843 3.849 3.855 3.86 3.866 3.872 3.878 3.884 3.889 3.895 3.901 3.907 3.913 3.918 3.924 3.93 3.936 3.942 3.947 3.953 3.959 3.965 3.971 3.976 3.982 3.988 3.994 4.0 4.005 4.011 4.017 4.023 4.029 4.034 4.04 4.046 4.052 4.058 4.063 4.069 4.075 4.081 4.087 4.093 4.098 4.104 4.11 4.116 4.122 4.127 4.133 4.139 4.145 4.151 4.156 4.162 4.168 4.174 4.18 4.185 4.191 4.197 4.203 4.209 4.214 4.22 4.226 4.232 4.238 4.243 4.249 4.255 4.261 4.267 4.272 4.278 4.284 4.29 4.296 4.301 4.307 4.313 4.319 4.325 4.331 4.336 4.342 4.348 4.354 4.36 4.365 4.371 4.377 4.383 4.389 4.394 4.4 4.406 4.412 4.418 4.423 4.429 4.435 4.441 4.447 4.452 4.458 4.464 4.47 4.476 4.481 4.487 4.493 4.499 4.505 4.51 4.516 4.522 4.528 4.534 4.539 4.545 4.551 4.557 4.563 4.569 4.574 4.58 4.586 4.592 4.598 4.603 4.609 4.615 4.621 4.627 4.632 4.638 4.644 4.65 4.656 4.661 4.667 4.673 4.679 4.685 4.69 4.696 4.702 4.708 4.714 4.719 4.725 4.731 4.737 4.743 4.748 4.754 4.76 4.766 4.772 4.777 4.783 4.789 4.795 4.801 4.807 4.812 4.818 4.824 4.83 4.836 4.841 4.847 4.853 4.859 4.865 4.87 4.876 4.882 4.888 4.894 4.899 4.905 4.911 4.917 4.923 4.928 4.934 4.94 4.946 4.952 4.957 4.963 4.969 4.975 4.981 4.986 4.992 4.998 5.004 5.01 5.015 5.021 5.027 5.033 5.039 5.045 5.05 5.056 5.062 5.068 5.074 5.079 5.085 5.091 5.097 5.103 5.108 5.114 5.12 5.126 5.132 5.137 5.143 5.149 5.155 5.161 5.166 5.172 5.178 5.184 5.19 5.195 5.201 5.207)) (quote (259.066 259.036 259.005 258.958 258.911 258.814 258.911 258.958 259.005 259.066 259.066 259.066 259.005 258.911 258.911 258.995 258.995 258.995 258.995 258.995 258.995 258.995 258.995 258.721 258.57 258.568 258.5 207.106 206.813 206.421 206.347 206.343 206.247 206.166 206.166 206.166 206.166 206.076 206.076 206.076 206.076 206.076 206.076 214.038 214.302 259.092 259.092 259.092 259.092 259.092 259.092 259.092 259.092 258.823 258.823 258.794 258.748 258.741 258.741 258.741 258.741 258.741 258.741 258.741 258.748 258.748 258.741 258.549 258.54 258.54 258.54 258.54 258.54 180.159 180.117 179.998 179.902 179.897 179.855 179.85 179.85 179.85 179.85 179.85 179.85 179.85 179.902 179.998 256.219 257.936 257.936 257.936 258.103 258.244 258.277 258.283 258.283 258.283 258.397 258.283 258.277 258.244 258.103 257.936 257.827 257.783 257.538 246.717 246.717 246.717 246.717 246.717 246.717 246.738 246.738 246.738 246.797 246.797 246.847 246.85 246.894 247.167 247.299 247.458 247.585 247.585 247.585 247.585 247.585 253.87 253.984 253.984 255.368 255.56 255.733 255.786 255.966 256.452 258.514 258.514 258.514 258.514 258.514 258.514 258.514 258.514 258.505 258.382 258.382 257.763 257.763 257.763 257.763 257.763 257.589 257.55 257.545 257.515 257.445 257.43 257.368 257.344 214.883 213.92 212.575 207.843 207.012 206.989 206.878 206.878 206.525 206.43 206.43 206.43 206.41 206.235 206.235 206.235 206.107 206.107 206.107 206.107 206.018 206.018 206.018 206.018 206.018 206.018 206.018 206.018 206.018 161.575 161.575 161.575 161.575 162.237 163.004 163.313 212.671 300.0 300.0 300.0 300.0 300.0 300.0 299.755 299.358 297.194 297.194 297.238 297.635 298.1 298.388 298.388 298.388 298.388 298.388 298.388 299.271 299.271 299.271 299.271 299.271 299.271 299.271 299.271 299.271 299.271 299.271 299.271 261.439 260.495 259.949 259.63 259.563 259.404 259.208 259.097 258.443 258.328 258.221 258.198 258.192 258.074 258.033 257.999 257.982 257.516 257.454 257.302 257.299 257.186 257.079 257.009 256.813 256.783 256.764 256.671 256.568 256.555 256.52 256.52 256.52 256.52 250.62 250.159 250.159 249.823 249.803 249.35 249.803 249.823 250.159 250.62 257.774 257.96 258.989 259.125 259.125 259.06 259.06 259.06 259.06 258.989 258.989 258.989 258.989 258.347 258.194 257.983 257.733 257.733 257.733 257.733 257.733 257.598 257.598 257.492 257.449 257.442 257.411 257.325 257.325 257.325 210.041 208.21 208.21 208.21 208.21 208.21 208.21 208.092 208.092 208.092 208.21 208.221 208.369 208.476 208.628 208.79 211.768 295.306 296.817 296.908 296.993 297.194 297.238 297.635 298.1 298.388 298.388 298.388 298.388 299.271 299.271 299.271 299.271 299.271 299.271 299.271 299.271 299.271 299.271 299.271 299.271 261.439 260.495 259.949 259.63 259.563 259.404 259.208 259.097 258.443 258.328 258.221 258.198 258.192 258.074 258.033 257.999 257.982 257.516 257.454 257.302 257.299 257.186 257.079 257.009 256.813 256.783 256.764 256.671 256.568 256.555 256.52 256.52 256.52 256.52 250.62 250.159 250.159 249.823 249.803 249.35 249.803 249.823 250.159 250.62 257.774 257.96 258.989 259.125 259.125 259.06 259.06 259.06 259.06 258.989 258.989 258.989 258.989 258.347 258.194 257.983 257.733 257.733 257.733 257.733 257.733 257.733 257.733 257.733 257.733 258.256 259.216 259.707 260.026 260.026 260.026 260.026 260.026 260.026 260.026 260.026 260.026 259.924 259.78 212.581 212.581 212.581 212.581 212.581 212.581 209.278 209.278 209.278 212.581 280.88 281.297 288.917 289.031 289.211 289.28 289.303 289.593 289.593 289.661 289.775 289.841 289.909 289.916 290.006 290.116 290.143 290.153 290.283 290.641 291.141 294.837 294.837 294.837 294.837 294.837 295.114 295.182 295.474 295.977 295.977 295.977 295.977 295.977 295.474 295.182 295.114 294.837 294.757 294.757 294.757 294.757 261.227 261.066 260.458 260.302 260.25 260.024 259.961 259.875 259.672 259.516 259.319 259.263 259.016 259.007 258.912 258.89 258.89 258.89 258.797 258.792 258.76 258.76 258.755 258.755 258.755 258.792 258.792 258.792 258.792 258.755 258.755 258.718 258.675 258.626 258.544 258.544 258.371 258.371 258.371 258.371 258.371 258.371 258.371 258.371 258.914 258.914 258.914 258.914 258.914 258.914 258.914 258.914 258.902 258.902 258.888 258.882 258.881 258.878 258.873 258.842 258.839 258.551 258.49 258.363 258.327 258.327 258.327 258.327 258.308 258.308 258.229 258.117 257.978 257.974 257.843 257.689 257.666 213.821 206.361 206.342 206.29 206.263 206.263 206.263 206.172 206.073 206.063 206.073 206.172 206.263 206.263 206.263 206.263 206.263 206.29 206.234 206.234 206.328 206.45 206.45 206.45 206.45 206.607 206.607 206.607 206.45 206.234 206.45 213.351 213.96 214.443 287.827 294.535 295.101 295.101 295.101 295.101 295.101 295.455 295.455 295.461 295.505 295.516 295.571 295.627 295.72 295.818 296.006 296.282 296.447 297.101 297.101 297.101 297.101 297.101 297.101 297.101 297.101 297.101 260.845 260.548 260.507 260.5 260.445 260.411 260.344 260.193 260.032 260.032 260.032 260.018 259.941 259.29 258.973 258.661 258.636 258.491 258.459 258.319 258.068 257.747 257.638 257.589 257.426 257.426 257.426 257.404 257.35 257.305 257.305 257.305 257.305 257.35 257.404 257.426 257.494 257.404 257.494 257.715 257.744 257.992 258.446 258.711 258.775 258.775 258.775 258.775 258.769 258.769 258.769 258.783 258.769 258.725 258.769 258.771 258.769 258.725 258.675 258.658 258.649 258.633 258.552 258.505 258.505 258.505 258.552 258.441 258.321 258.223 258.034 257.825 257.741 257.522 257.384 214.786 208.202 207.385 207.17 206.585 206.492 206.47 206.47 206.47 206.411 206.411 206.46 206.46 206.411 206.405 206.329 206.329 206.329 206.329 206.46 206.523 206.851 207.234 207.611 258.035 258.04 258.092 258.092 258.092 258.093 258.093 258.168 258.252 258.252 258.252 258.252 258.252 258.212 258.168 258.093 258.093 258.093 258.093 258.009 258.009 258.009 258.006 257.782 257.766 257.569 257.555 257.467 257.388 257.269 257.01 179.959 179.959 179.959 179.959 179.959 179.959 179.959 179.959 179.959 181.575 259.627 259.829 259.834 259.834 259.834 259.834 259.834 259.834 259.829 259.829 259.627 259.533 259.472 259.217 259.148 259.111 259.087 258.738 258.505 258.46 258.275 258.233 257.131 257.079 256.935 256.794 256.771 256.707 256.421 256.052 256.052 256.052 256.052 256.052 256.052 255.373 247.831 247.52 247.52 247.52 247.482 247.52 247.831 255.373 257.02 258.584 258.767 258.882 258.859 258.859 258.767 258.378 258.498 258.641 258.767 258.806 258.806 258.806 258.806 258.769 258.748 258.692 258.692 258.692 258.692 258.641 258.641 258.641 258.641 258.641 258.509 258.479 258.37 213.788 208.373 207.611 207.09 206.73 206.528 206.461 206.331 206.213 206.063 206.063 206.063 206.063 206.063 206.063 206.063 206.063 206.213 206.213 206.213 206.213 206.213 206.213 206.213 206.213 206.523 206.831 208.694 208.694 157.653 157.62 157.605 157.498 157.498 157.498 157.605 157.62 157.653 181.66 181.742 182.153 182.859 182.859 182.859 182.859 296.954 296.954 297.073 297.134 297.324 297.408 297.456 297.676 297.787 297.731 297.676 297.566 297.456 297.432 297.408 297.432 297.456)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SDIF->BPF" (quote sdif->bpf) (quote ((om-load-inputfun (quote input-funbox) "SDIF file" "SELF" nil))) (om-make-point 809 333) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "f0.sdif" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil))) (om-make-point 805 243) (om-make-point 72 76) (let ((newobj (load-sdif-file (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "f0" :type "sdif")))) (when newobj) newobj) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "chordseqs.sdif" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil))) (om-make-point 449 232) (om-make-point 72 76) (let ((newobj (load-sdif-file (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "chordseqs" :type "sdif")))) (when newobj) newobj) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "partials.sdif" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil))) (om-make-point 106 233) (om-make-point 72 76) (let ((newobj (load-sdif-file (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "partials" :type "sdif")))) (when newobj) newobj) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 47 40))) nil nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "africa.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "MARKERS" nil))) (om-make-point 788 76) (om-make-point 229 68) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files")) :device :unspecific :host :unspecific :name "africa" :type "aiff") 1 1.0 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "africa.aiff") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote t) nil 0)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "africa.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "MARKERS" nil))) (om-make-point 432 77) (om-make-point 229 68) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files")) :device :unspecific :host :unspecific :name "africa" :type "aiff") 1 1.0 0))) (when thesound (setf (markers thesound) (quote (0.113 0.311 0.565 1.018 1.173 1.442 1.739 2.304 2.869 3.195 3.802 4.339 4.707)))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "africa.aiff") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote t) nil 0)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PM2-F0" (quote pm2-f0) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SELF" nil))) (om-make-point 819 163) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CHORD-SEQ-ANALYSIS" (quote chord-seq-analysis) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SELF" nil))) (om-make-point 429 156) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PARTIAL-TRACKING" (quote partial-tracking) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SELF" nil))) (om-make-point 96 154) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "africa.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "MARKERS" nil))) (om-make-point 89 77) (om-make-point 229 68) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files")) :device :unspecific :host :unspecific :name "africa" :type "aiff") 1 1.0 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "africa.aiff") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote t) nil 0)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((16 0 0 0 nil 0) (15 0 1 0 nil 0) (16 0 9 0 nil 0) (0 0 10 0 nil 0) (1 0 11 0 nil 0) (13 0 12 0 nil 0) (14 0 13 0 nil 0) (19 0 14 0 nil 0) (20 0 15 0 nil 0) (21 0 16 0 nil 0) (17 0 19 0 nil 0) (18 0 20 0 nil 0) (22 0 21 0 nil 0))) nil 6.15))